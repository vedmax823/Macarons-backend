// <auto-generated />
using System;
using DonMacaron.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DonMacaron.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241028123427_AddMacaronsVersioning1")]
    partial class AddMacaronsVersioning1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DonMacaron.Entities.Allergen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Allergens");
                });

            modelBuilder.Entity("DonMacaron.Entities.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AllergenId")
                        .HasColumnType("uuid");

                    b.Property<bool>("ContainsGluten")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("MacaronsVersionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AllergenId");

                    b.HasIndex("MacaronsVersionId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("DonMacaron.Entities.Macaron", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CurrentVersionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IngredientId")
                        .HasColumnType("uuid");

                    b.Property<string>("PublicUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CurrentVersionId");

                    b.HasIndex("IngredientId");

                    b.ToTable("Macarons");
                });

            modelBuilder.Entity("DonMacaron.Entities.MacaronsBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("AdvertismentPrice")
                        .HasColumnType("real");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCurrentlyUnavailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFixed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsXl")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfMacarons")
                        .HasColumnType("integer");

                    b.Property<string>("PictureLink")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("PublicUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("MacaronsBoxes");
                });

            modelBuilder.Entity("DonMacaron.Entities.Products.Macarons.MacaronsVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("AdvertismentPrice")
                        .HasColumnType("real");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCurrentlyAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsXl")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MacaronId")
                        .HasColumnType("uuid");

                    b.Property<string>("PictureLink")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("Taste")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MacaronId");

                    b.ToTable("MacaronsVersions");
                });

            modelBuilder.Entity("DonMacaron.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DonMacaron.Entities.SmallMacaronsSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<Guid>("MacaronId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MacaronsBoxId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MacaronId");

                    b.HasIndex("MacaronsBoxId");

                    b.ToTable("SmallMacaronsSets");
                });

            modelBuilder.Entity("DonMacaron.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("DonMacaron.Entities.Ingredient", b =>
                {
                    b.HasOne("DonMacaron.Entities.Allergen", "Allergen")
                        .WithMany()
                        .HasForeignKey("AllergenId");

                    b.HasOne("DonMacaron.Entities.Products.Macarons.MacaronsVersion", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("MacaronsVersionId");

                    b.Navigation("Allergen");
                });

            modelBuilder.Entity("DonMacaron.Entities.Macaron", b =>
                {
                    b.HasOne("DonMacaron.Entities.Products.Macarons.MacaronsVersion", "CurrentVersion")
                        .WithMany()
                        .HasForeignKey("CurrentVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DonMacaron.Entities.Ingredient", null)
                        .WithMany("Macarons")
                        .HasForeignKey("IngredientId");

                    b.Navigation("CurrentVersion");
                });

            modelBuilder.Entity("DonMacaron.Entities.Products.Macarons.MacaronsVersion", b =>
                {
                    b.HasOne("DonMacaron.Entities.Macaron", null)
                        .WithMany("MacaronsVersions")
                        .HasForeignKey("MacaronId");
                });

            modelBuilder.Entity("DonMacaron.Entities.SmallMacaronsSet", b =>
                {
                    b.HasOne("DonMacaron.Entities.Macaron", "Macaron")
                        .WithMany()
                        .HasForeignKey("MacaronId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DonMacaron.Entities.MacaronsBox", null)
                        .WithMany("SmallMacaronsSets")
                        .HasForeignKey("MacaronsBoxId");

                    b.Navigation("Macaron");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("DonMacaron.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DonMacaron.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DonMacaron.Entities.Ingredient", b =>
                {
                    b.Navigation("Macarons");
                });

            modelBuilder.Entity("DonMacaron.Entities.Macaron", b =>
                {
                    b.Navigation("MacaronsVersions");
                });

            modelBuilder.Entity("DonMacaron.Entities.MacaronsBox", b =>
                {
                    b.Navigation("SmallMacaronsSets");
                });

            modelBuilder.Entity("DonMacaron.Entities.Products.Macarons.MacaronsVersion", b =>
                {
                    b.Navigation("Ingredients");
                });
#pragma warning restore 612, 618
        }
    }
}
